{
	"info": {
		"_postman_id": "8304a8e1-b326-434b-a553-3c465b816cb1",
		"name": "Users_final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5430351",
		"_collection_link": "https://shinkai-tester.postman.co/workspace/Team-Workspace~f2b37203-5c0d-458f-80ce-4a73f59be5b2/collection/5430351-8304a8e1-b326-434b-a553-3c465b816cb1?action=share&creator=5430351&source=collection_link"
	},
	"item": [
		{
			"name": "Users: тестируем ответ Add task in cron",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var moment = require('moment'); // импорт библиотеки Moment.js\r",
							"\r",
							"var jsonData = pm.response.json(); // распарсили JSON ответ\r",
							"console.log(jsonData);\r",
							"\r",
							"// находим в message ответа dateTime, используя регулярное выражение, из массива приводим к строке\r",
							"var dateTimeMessageString = jsonData.message.match(/\\d{2}\\.\\d{2}\\.\\d{4} \\d{2}:\\d{2}/).toString();\r",
							"console.log(dateTimeMessageString);\r",
							"\r",
							"// с помощью библиотеки Moment.js указываем формат dateTimeMessageString, приводим к типу данных даты. Переменную dateTimeMessage будем использовать для тестов\r",
							"var dateTimeMessage = new Date(moment(dateTimeMessageString, \"DD.MM.YYYY HH:mm\"));\r",
							"console.log(dateTimeMessage);\r",
							"\r",
							"// при помощи регулярного выражения извлекаем из message ответа task_id, записываем в переменную taskMessage\r",
							"var taskMessage = jsonData.message.match(/\\d+/).toString();\r",
							"console.log(taskMessage);\r",
							"\r",
							"/* в Pre-Request скрипте с помощью сторонней библиотеки later.js я преобразовала крон выражение в дату \r",
							"(крон выражение состояло из тех данных, которые мы отправляли в запросе, они же были записаны как переменные\r",
							"окружения), полученную дату записала в переменную окружения date_expected. А с помощью библиотеки moment.js тут я поменяла формат даты.\r",
							"Дальше эту переменную я буду использовать для проверки message в ответе\r",
							"*/\r",
							"var date_from_cron = moment(pm.environment.get(\"date_expected\")).format(\"DD.MM.YYYY HH:mm\");\r",
							"console.log(date_from_cron);\r",
							"\r",
							"pm.test(\"Вернулся статус 2хх\", function () {\r",
							"    pm.response.to.be.success\r",
							"});\r",
							"\r",
							"pm.test(\"type в ответе - success\", function () {\r",
							"    pm.expect(jsonData.type).to.eql(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"проверяем task_id в message\", function () {\r",
							"    pm.expect(taskMessage).to.eql(pm.environment.get(\"taskId\").toString());\r",
							"});\r",
							"\r",
							"/* используя методы getHours(), getMinutes(), getMonth(), getDate(), getDay(), сравниваем dateTimeMessage со значениями, которые вводили в запросе \r",
							"\"hours\": 14,\r",
							"\"minutes\": 23,\r",
							"\"month\": 10,\r",
							"\"days\": 3,\r",
							"\"day_weeks\": 2\r",
							"*/\r",
							"\r",
							"pm.test(\"проверяем hours в message\", function () {\r",
							"    pm.expect(dateTimeMessage.getHours()).to.eql(Number(pm.environment.get(\"hours\")));\r",
							"});\r",
							"\r",
							"pm.test(\"проверяем minutes в message\", function () {\r",
							"    pm.expect(dateTimeMessage.getMinutes()).to.eql(Number(pm.environment.get(\"minutes\")));\r",
							"});\r",
							"\r",
							"pm.test(\"проверяем month в message\", function () {\r",
							"    pm.expect(dateTimeMessage.getMonth()).to.eql(Number(pm.environment.get(\"month\")) - 1);\r",
							"});\r",
							"\r",
							"pm.test(\"проверяем days в message\", function () {\r",
							"    pm.expect(dateTimeMessage.getDate()).to.eql(Number(pm.environment.get(\"days\")));\r",
							"});\r",
							"\r",
							"pm.test(\"проверяем day_weeks в message\", function () {\r",
							"    pm.expect(dateTimeMessage.getDay()).to.eql(Number(pm.environment.get(\"day_weeks\")));\r",
							"});\r",
							"\r",
							"pm.test(\"проверяем полностью текст message\", function () {\r",
							"    pm.expect(jsonData.message).to.eql('Расписание успешно добавлено в задачу ' + taskMessage + ' ' + 'Следущая дата запуска ' + date_from_cron);\r",
							"});\r",
							"\r",
							"\r",
							"// удаляем задачу и юзера, прибираем за собой + чистим переменные среды\r",
							"const deleteUser = {\r",
							"  url: pm.environment.get(\"baseUrl\") + '/tasks/rest/deleteuser',\r",
							"  method: 'POST',\r",
							"  header: {\r",
							"        'content-type': 'application/json'\r",
							"    },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"    email: pm.environment.get(\"userEmail\")})\r",
							"  }\r",
							"};\r",
							"\r",
							"const deleteTask = {\r",
							"  url: pm.environment.get(\"baseUrl\") + '/tasks/rest/deletetask',\r",
							"  method: 'POST',\r",
							"  header: {\r",
							"        'content-type': 'application/json'\r",
							"    },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"    email_owner: pm.environment.get(\"userEmail\"),\r",
							"    task_id: pm.environment.get(\"taskId\").toString()\r",
							"    })\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.sendRequest(deleteTask, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else if (res.json().type != \"success\") {\r",
							"        throw new Error('Task is not deleted, type=success must be in response');\r",
							"    } else {\r",
							"        console.log(res.json().message);\r",
							"        pm.sendRequest(deleteUser, function (err, res) {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"            } else {\r",
							"                email = pm.environment.get(\"userEmail\");\r",
							"                console.log(`Пользователь с email ${email} удален`);\r",
							"\r",
							"                // наконец, чистим переменные, полученные в Pre-Request скрипте\r",
							"                pm.environment.unset(\"date_expected\");\r",
							"                pm.environment.unset(\"userEmail\");\r",
							"                pm.environment.unset(\"taskId\");\r",
							"                pm.environment.unset(\"hours\");\r",
							"                pm.environment.unset(\"minutes\");\r",
							"                pm.environment.unset(\"month\");\r",
							"                pm.environment.unset(\"days\");\r",
							"                pm.environment.unset(\"day_weeks\");\r",
							"                }\r",
							"        });\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// https://testbase.atlassian.net/wiki/spaces/USERS/pages/592511089/SOAP+REST\r",
							"\r",
							"// Подготовка данных - запрос в переменной на регистрацию пользователя\r",
							"var userName = pm.variables.replaceIn('{{$randomFullName}}');\r",
							"var userEmail = \"demouser\" + pm.variables.replaceIn('{{$randomInt}}') + \"@example.com\";\r",
							"var password = pm.variables.replaceIn('{{$randomPassword}}');\r",
							"pm.environment.set(\"userEmail\", userEmail);\r",
							"\r",
							"const createUser = {\r",
							"  url: pm.environment.get(\"baseUrl\") + '/tasks/rest/doregister',\r",
							"  method: 'POST',\r",
							"  header: {\r",
							"        'content-type': 'application/json'\r",
							"    },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"    email: pm.environment.get(\"userEmail\"),\r",
							"    name: userName,\r",
							"    password: password})\r",
							"  }\r",
							"};\r",
							"\r",
							"// Подготовка данных - запрос в переменной на создание таски\r",
							"var task = \"Task \" + pm.variables.replaceIn('{{$randomInt}}');\r",
							"var description = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
							"\r",
							"const createTask = {\r",
							"  url: pm.environment.get(\"baseUrl\") + '/tasks/rest/createtask',\r",
							"  method: 'POST',\r",
							"  header: {\r",
							"        'content-type': 'application/json'\r",
							"    },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"  task_title: task,\r",
							"  task_description: description,\r",
							"  email_owner: pm.environment.get(\"userEmail\"),\r",
							"  email_assign: pm.environment.get(\"userEmail\")})\r",
							"  }\r",
							"};\r",
							"\r",
							"/* Отправка запроса на создание пользователя.\r",
							"Если пользователь создан успешно - создаем и таску. Нам она как раз нужна для внесения задачи в крон (расписание).\r",
							"*/\r",
							"\r",
							"pm.sendRequest(createUser, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else if (!Object.keys(res.json()).includes( \"name\" && \"email\" && \"password\")) {\r",
							"        throw new Error('User is not registered: required parameters are not found!');\r",
							"    } else {\r",
							"        console.log(\"User with email \" + pm.environment.get(\"userEmail\") + \" has been created in Pre-request Script\");\r",
							"        pm.sendRequest(createTask, function (err, res) {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"            } else if (!Object.keys(res.json()).includes(\"id_task\")) {\r",
							"                throw new Error('Task id is missing in the response!');\r",
							"            } else {\r",
							"                console.log(\"Task with id=\" + res.json().id_task + \" has been created in Pre-request Script\");\r",
							"                pm.environment.set(\"taskId\", res.json().id_task);\r",
							"                }\r",
							"        });\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.environment.set(\"hours\", _.random (1,23));\r",
							"pm.environment.set(\"minutes\", _.random (0,59));\r",
							"pm.environment.set(\"days\", _.random (1,28));\r",
							"pm.environment.set(\"month\", _.random (1,12));\r",
							"pm.environment.set(\"day_weeks\", _.random (1,6));\r",
							"\r",
							"\r",
							"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/later/1.2.0/later.min.js', (err, res) => {\r",
							"var text = res.text();\r",
							"(new Function(text))();\r",
							"later.date.localTime();\r",
							"var cron = pm.environment.get(\"minutes\") + ' ' + pm.environment.get(\"hours\") + ' ' + pm.environment.get(\"days\") + ' ' + pm.environment.get(\"month\") + ' ' + pm.environment.get(\"day_weeks\");\r",
							"var s = later.parse.cron(cron);\r",
							"date_expected = later.schedule(s).next(1);\r",
							"console.log(date_expected);\r",
							"pm.environment.set(\"date_expected\", date_expected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email_owner\": \"{{userEmail}}\",\r\n\"task_id\": \"{{taskId}}\",\r\n\"hours\": \"{{hours}}\",\r\n\"minutes\": \"{{minutes}}\",\r\n\"month\": \"{{month}}\",\r\n\"days\": \"{{days}}\",\r\n\"day_weeks\": \"{{day_weeks}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/rest/addtaskincron",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"rest",
						"addtaskincron"
					]
				},
				"description": "добавить таску в расписание"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "randomEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomName",
			"value": "",
			"type": "string"
		}
	]
}