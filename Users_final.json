{
	"info": {
		"_postman_id": "8304a8e1-b326-434b-a553-3c465b816cb1",
		"name": "Users_final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5430351",
		"_collection_link": "https://shinkai-tester.postman.co/workspace/Team-Workspace~f2b37203-5c0d-458f-80ce-4a73f59be5b2/collection/5430351-8304a8e1-b326-434b-a553-3c465b816cb1?action=share&creator=5430351&source=collection_link"
	},
	"item": [
		{
			"name": "Users: тестируем ответ Add task in cron",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var moment = require('moment'); // импорт библиотеки Moment.js\r",
							"\r",
							"var jsonData = pm.response.json(); // распарсили JSON ответ\r",
							"console.log(jsonData);\r",
							"\r",
							"// находим в message ответа dateTime, используя регулярное выражение, из массива приводим к строке\r",
							"var dateTimeMessageString = jsonData.message.match(/\\d{2}\\.\\d{2}\\.\\d{4} \\d{2}:\\d{2}/).toString();\r",
							"console.log(dateTimeMessageString);\r",
							"\r",
							"// с помощью библиотеки Moment.js указываем формат dateTimeMessageString, приводим к типу данных даты. Переменную dateTimeMessage будем использовать для тестов\r",
							"var dateTimeMessage = new Date(moment(dateTimeMessageString, \"DD.MM.YYYY HH:mm\"));\r",
							"console.log(dateTimeMessage);\r",
							"\r",
							"// при помощи регулярного выражения извлекаем из message ответа task_id, записываем в переменную taskMessage\r",
							"var taskMessage = jsonData.message.match(/\\d+/).toString();\r",
							"console.log(taskMessage);\r",
							"\r",
							"/* в Pre-Request скрипте с помощью сторонней библиотеки later.js я преобразовала крон выражение в дату \r",
							"(крон выражение состояло из тех данных, которые мы отправляли в запросе, они же были записаны как переменные\r",
							"окружения), полученную дату записала в переменную окружения date_expected. А с помощью библиотеки moment.js тут я поменяла формат даты.\r",
							"Дальше эту переменную я буду использовать для проверки message в ответе\r",
							"*/\r",
							"var date_from_cron = moment(pm.environment.get(\"date_expected\")).format(\"DD.MM.YYYY HH:mm\");\r",
							"console.log(date_from_cron);\r",
							"\r",
							"pm.test(\"Вернулся статус 2хх\", function () {\r",
							"    pm.response.to.be.success\r",
							"});\r",
							"\r",
							"pm.test(\"type в ответе - success\", function () {\r",
							"    pm.expect(jsonData.type).to.eql(\"success\");\r",
							"});\r",
							"\r",
							"pm.test(\"проверяем task_id в message\", function () {\r",
							"    pm.expect(taskMessage).to.eql(pm.environment.get(\"taskId\").toString());\r",
							"});\r",
							"\r",
							"/* используя методы getHours(), getMinutes(), getMonth(), getDate(), getDay(), сравниваем dateTimeMessage со значениями, которые вводили в запросе \r",
							"\"hours\": 14,\r",
							"\"minutes\": 23,\r",
							"\"month\": 10,\r",
							"\"days\": 3,\r",
							"\"day_weeks\": 2\r",
							"*/\r",
							"\r",
							"pm.test(\"проверяем hours в message\", function () {\r",
							"    pm.expect(dateTimeMessage.getHours()).to.eql(Number(pm.environment.get(\"hours\")));\r",
							"});\r",
							"\r",
							"pm.test(\"проверяем minutes в message\", function () {\r",
							"    pm.expect(dateTimeMessage.getMinutes()).to.eql(Number(pm.environment.get(\"minutes\")));\r",
							"});\r",
							"\r",
							"pm.test(\"проверяем month в message\", function () {\r",
							"    pm.expect(dateTimeMessage.getMonth()).to.eql(Number(pm.environment.get(\"month\")) - 1);\r",
							"});\r",
							"\r",
							"pm.test(\"проверяем days в message\", function () {\r",
							"    pm.expect(dateTimeMessage.getDate()).to.eql(Number(pm.environment.get(\"days\")));\r",
							"});\r",
							"\r",
							"pm.test(\"проверяем day_weeks в message\", function () {\r",
							"    pm.expect(dateTimeMessage.getDay()).to.eql(Number(pm.environment.get(\"day_weeks\")));\r",
							"});\r",
							"\r",
							"pm.test(\"проверяем полностью текст message\", function () {\r",
							"    pm.expect(jsonData.message).to.eql('Расписание успешно добавлено в задачу ' + taskMessage + ' ' + 'Следущая дата запуска ' + date_from_cron);\r",
							"});\r",
							"\r",
							"\r",
							"// удаляем задачу и юзера, прибираем за собой + чистим переменные среды\r",
							"const deleteUser = {\r",
							"  url: pm.environment.get(\"baseUrl\") + '/tasks/rest/deleteuser',\r",
							"  method: 'POST',\r",
							"  header: {\r",
							"        'content-type': 'application/json'\r",
							"    },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"    email: pm.environment.get(\"userEmail\")})\r",
							"  }\r",
							"};\r",
							"\r",
							"const deleteTask = {\r",
							"  url: pm.environment.get(\"baseUrl\") + '/tasks/rest/deletetask',\r",
							"  method: 'POST',\r",
							"  header: {\r",
							"        'content-type': 'application/json'\r",
							"    },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"    email_owner: pm.environment.get(\"userEmail\"),\r",
							"    task_id: pm.environment.get(\"taskId\").toString()\r",
							"    })\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.sendRequest(deleteTask, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else if (res.json().type != \"success\") {\r",
							"        throw new Error('Task is not deleted, type=success must be in response');\r",
							"    } else {\r",
							"        console.log(res.json().message);\r",
							"        pm.sendRequest(deleteUser, function (err, res) {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"            } else {\r",
							"                email = pm.environment.get(\"userEmail\");\r",
							"                console.log(`Пользователь с email ${email} удален`);\r",
							"\r",
							"                // наконец, чистим переменные, полученные в Pre-Request скрипте\r",
							"                pm.environment.unset(\"date_expected\");\r",
							"                pm.environment.unset(\"userEmail\");\r",
							"                pm.environment.unset(\"taskId\");\r",
							"                pm.environment.unset(\"hours\");\r",
							"                pm.environment.unset(\"minutes\");\r",
							"                pm.environment.unset(\"month\");\r",
							"                pm.environment.unset(\"days\");\r",
							"                pm.environment.unset(\"day_weeks\");\r",
							"                }\r",
							"        });\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// https://testbase.atlassian.net/wiki/spaces/USERS/pages/592511089/SOAP+REST\r",
							"\r",
							"// Подготовка данных - запрос в переменной на регистрацию пользователя\r",
							"var userName = pm.variables.replaceIn('{{$randomFullName}}');\r",
							"var userEmail = \"demouser\" + pm.variables.replaceIn('{{$randomInt}}') + \"@example.com\";\r",
							"var password = pm.variables.replaceIn('{{$randomPassword}}');\r",
							"pm.environment.set(\"userEmail\", userEmail);\r",
							"\r",
							"const createUser = {\r",
							"  url: pm.environment.get(\"baseUrl\") + '/tasks/rest/doregister',\r",
							"  method: 'POST',\r",
							"  header: {\r",
							"        'content-type': 'application/json'\r",
							"    },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"    email: pm.environment.get(\"userEmail\"),\r",
							"    name: userName,\r",
							"    password: password})\r",
							"  }\r",
							"};\r",
							"\r",
							"// Подготовка данных - запрос в переменной на создание таски\r",
							"var task = \"Task \" + pm.variables.replaceIn('{{$randomInt}}');\r",
							"var description = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
							"\r",
							"const createTask = {\r",
							"  url: pm.environment.get(\"baseUrl\") + '/tasks/rest/createtask',\r",
							"  method: 'POST',\r",
							"  header: {\r",
							"        'content-type': 'application/json'\r",
							"    },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({\r",
							"  task_title: task,\r",
							"  task_description: description,\r",
							"  email_owner: pm.environment.get(\"userEmail\"),\r",
							"  email_assign: pm.environment.get(\"userEmail\")})\r",
							"  }\r",
							"};\r",
							"\r",
							"/* Отправка запроса на создание пользователя.\r",
							"Если пользователь создан успешно - создаем и таску. Нам она как раз нужна для внесения задачи в крон (расписание).\r",
							"*/\r",
							"\r",
							"pm.sendRequest(createUser, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"    } else if (!Object.keys(res.json()).includes( \"name\" && \"email\" && \"password\")) {\r",
							"        throw new Error('User is not registered: required parameters are not found!');\r",
							"    } else {\r",
							"        console.log(\"User with email \" + pm.environment.get(\"userEmail\") + \" has been created in Pre-request Script\");\r",
							"        pm.sendRequest(createTask, function (err, res) {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"            } else if (!Object.keys(res.json()).includes(\"id_task\")) {\r",
							"                throw new Error('Task id is missing in the response!');\r",
							"            } else {\r",
							"                console.log(\"Task with id=\" + res.json().id_task + \" has been created in Pre-request Script\");\r",
							"                pm.environment.set(\"taskId\", res.json().id_task);\r",
							"                }\r",
							"        });\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.environment.set(\"hours\", _.random (1,23));\r",
							"pm.environment.set(\"minutes\", _.random (0,59));\r",
							"pm.environment.set(\"days\", _.random (1,28));\r",
							"pm.environment.set(\"month\", _.random (1,12));\r",
							"pm.environment.set(\"day_weeks\", _.random (1,6));\r",
							"\r",
							"\r",
							"pm.sendRequest('https://cdnjs.cloudflare.com/ajax/libs/later/1.2.0/later.min.js', (err, res) => {\r",
							"var text = res.text();\r",
							"(new Function(text))();\r",
							"later.date.localTime();\r",
							"var cron = pm.environment.get(\"minutes\") + ' ' + pm.environment.get(\"hours\") + ' ' + pm.environment.get(\"days\") + ' ' + pm.environment.get(\"month\") + ' ' + pm.environment.get(\"day_weeks\");\r",
							"var s = later.parse.cron(cron);\r",
							"date_expected = later.schedule(s).next(1);\r",
							"console.log(date_expected);\r",
							"pm.environment.set(\"date_expected\", date_expected);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email_owner\": \"{{userEmail}}\",\r\n\"task_id\": \"{{taskId}}\",\r\n\"hours\": \"{{hours}}\",\r\n\"minutes\": \"{{minutes}}\",\r\n\"month\": \"{{month}}\",\r\n\"days\": \"{{days}}\",\r\n\"day_weeks\": \"{{day_weeks}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/rest/addtaskincron",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"rest",
						"addtaskincron"
					]
				},
				"description": "добавить таску в расписание"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// visualize response as a table",
					"var template = `",
					"<style>",
					"        .fill,",
					"body,",
					"html {",
					"  height: 100%",
					"}",
					"",
					"#json_vl,",
					".td_head,",
					".td_row_even,",
					".td_row_odd {",
					"  font-size: small",
					"}",
					"",
					"#json_pnl,",
					"#xxa,",
					".navbar-header,",
					".navbar-nav,",
					".navbar-nav>li,",
					".td_head {",
					"  float: left",
					"}",
					"",
					".fill {",
					"  min-height: 100%",
					"}",
					"",
					"#json_vl {",
					"  font-family: Consolas, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace",
					"}",
					"",
					"#widget {",
					"  width: 100%",
					"}",
					"",
					".top_size {",
					"  height: 51px",
					"}",
					"",
					"#all_panels {",
					"  height: 100%;",
					"  min-height: 100%",
					"}",
					"",
					"#aboutLnk {",
					"  position: fixed;",
					"  right: 10px;",
					"  top: 15px",
					"}",
					"",
					"#inner_text {",
					"  display: block;",
					"  position: absolute;",
					"  height: auto;",
					"  bottom: 0;",
					"  top: 0;",
					"  left: 0;",
					"  right: 0;",
					"  margin-top: 51px;",
					"  margin-bottom: 0",
					"}",
					"",
					"#json_pnl {",
					"  background-color: #ccc;",
					"  width: 33.3%",
					"}",
					"",
					"#xxa {",
					"  background-color: #E8E8E8;",
					"  width: 66.7%",
					"}",
					"",
					"#table_pnl,",
					"#tree_pnl {",
					"  background-color: #E8E8E8;",
					"  float: left;",
					"  width: 50%",
					"}",
					"",
					"#sharethis {",
					"  position: fixed;",
					"  right: 80px;",
					"  top: 10px",
					"}",
					"",
					"#inner_tbl {",
					"  padding-left: 2px",
					"}",
					"",
					".td_row_even {",
					"  padding: 2px;",
					"  background-color: #F6F4F0",
					"}",
					"",
					".td_row_odd {",
					"  padding: 2px;",
					"  background-color: #FFF",
					"}",
					"",
					".td_head {",
					"  padding: 2px;",
					"  font-weight: 700",
					"}",
					"",
					"input,",
					"p,",
					"select,",
					"td,",
					"textarea,",
					"th {",
					"  font-size: 1em",
					"}",
					"",
					"table,",
					"td,",
					"th {",
					"  border: 1px solid gray",
					"}",
					"",
					"textarea {",
					"  -moz-box-sizing: border-box;",
					"  -webkit-box-sizing: border-box;",
					"  box-sizing: border-box;",
					"  display: block;",
					"  width: 100%;",
					"  height: 100%;",
					"  margin: 0;",
					"  padding: 4px;",
					"  border: 1px solid #333;",
					"  overflow-y: auto;",
					"  overflow-x: hidden",
					"}",
					"",
					"*,",
					"html {",
					"  font-family: Verdana, Arial, Helvetica, sans-serif",
					"}",
					"",
					"form,",
					"h1,",
					"h2,",
					"h3,",
					"h4,",
					"h5,",
					"li,",
					"p,",
					"ul {",
					"  margin: 0;",
					"  padding: 0",
					"}",
					"",
					"img {",
					"  border: none",
					"}",
					"",
					"p {",
					"  margin: 0 0 1em",
					"}",
					"",
					"table {",
					"  font-size: 100%;",
					"  background-color: white;",
					"}",
					"",
					"ol.tree {",
					"  padding: 0 0 0 30px;",
					"  width: 300px",
					"}",
					"",
					"li {",
					"  position: relative;",
					"  margin-left: -15px;",
					"  list-style: none",
					"}",
					"",
					"li.file {",
					"  margin-left: -1px !important",
					"}",
					"",
					"li.file a {",
					"  background: url(leaf.png)0 5px no-repeat;",
					"  color: #000;",
					"  padding-left: 12px;",
					"  text-decoration: none;",
					"  display: block;",
					"  font-size: small",
					"}",
					"",
					"li.file a[href$='.css'],",
					"li.file a[href$='.js'],",
					"li.file a[href*='.pdf'],",
					"li.file a[href*='.html'] {",
					"  background: url(http://www.thecssninja.com/demo/css_tree/document.png)no-repeat",
					"}",
					"",
					"li input {",
					"  position: absolute;",
					"  left: 0;",
					"  margin-left: 0;",
					"  opacity: 0;",
					"  z-index: 2;",
					"  cursor: pointer;",
					"  height: 1em;",
					"  width: 1em;",
					"  top: 0",
					"}",
					"",
					"li input+ol {",
					"  background: url(http://www.thecssninja.com/demo/css_tree/toggle-small-expand.png)40px -3px no-repeat;",
					"  margin: -20px 0 0 -44px;",
					"  height: 1em;",
					"  padding: 1.563em 0 0 80px",
					"}",
					"",
					"li label.lbl_array,",
					"li label.lbl_obj {",
					"  display: block;",
					"  padding-left: 33px;",
					"  margin-bottom: 2px",
					"}",
					"",
					"li input+ol>li {",
					"  display: none;",
					"  margin-left: -14px !important;",
					"  padding-left: 1px",
					"}",
					"",
					"li label.lbl_obj {",
					"  background: url(folder.png)15px 1px no-repeat;",
					"  cursor: pointer",
					"}",
					"",
					"li label.lbl_array {",
					"  background: url(array.png)15px 1px no-repeat;",
					"  cursor: pointer",
					"}",
					"",
					"li input:checked+ol {",
					"  background: url(http://www.thecssninja.com/demo/css_tree/toggle-small.png)40px -3px no-repeat;",
					"  margin: -20px 0 0 -44px;",
					"  padding: 1.563em 0 0 80px;",
					"  height: auto",
					"}",
					"",
					"li input:checked+ol>li {",
					"  display: block;",
					"  margin: 0 0 .125em",
					"}",
					"",
					"li input:checked+ol>li:last-child {",
					"  margin: 0 0 .063em",
					"}",
					"",
					".container {",
					"  width: 970px;",
					"  max-width: none !important",
					"}",
					"",
					".col-xs-4 {",
					"  padding-top: 15px;",
					"  padding-bottom: 15px;",
					"  background-color: #eee;",
					"  background-color: rgba(86, 61, 124, .15);",
					"  border: 1px solid #ddd;",
					"  border: 1px solid rgba(86, 61, 124, .2)",
					"}",
					"",
					"    </style>",
					"<div id=\"html\">",
					"<input type=\"text\" id=\"json\">",
					"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>",
					"<!--<script src=\"json2table.js\"></script>-->",
					"<script>",
					"$(function() {",
					"    pm.getData((err, data) => {",
					"        $(\"#json\").val(JSON.stringify(data.json));",
					"        json2table(\"#html\");",
					"    });",
					"});",
					"",
					"function call(a) {",
					"    $(\"#json\").val(JSON.stringify(a, void 0, 2));",
					"    json2table()",
					"}",
					"",
					"function json2table(selector) {",
					"    $(selector).html(buildTable(getJsonVar()));",
					"}",
					"",
					"function getJsonVar() {",
					"    try {",
					"        var a = $.parseJSON($(\"#json\").val());",
					"        $(\"#json\").val(JSON.stringify(a, void 0, 2));",
					"        return a",
					"    } catch (e) {",
					"        //return $(\"#error_msg\").text(e.message), $(\"#errorModal\").modal(\"show\"), {}",
					"        alert(e);",
					"    }",
					"}",
					"",
					"function buildTable(a) {",
					"    var e = document.createElement(\"table\"),",
					"        d, b;",
					"    if (isArray(a)) return buildArray(a);",
					"    for (var c in a) \"object\" != typeof a[c] || isArray(a[c]) ? \"object\" == typeof a[c] && isArray(a[c]) ? (d = e.insertRow(-1), b = d.insertCell(-1), b.colSpan = 2, b.innerHTML = '<div class=\"td_head\">' + encodeText(c) + '</div><table style=\"width:100%\">' + $(buildArray(a[c]), !1).html() + \"</table>\") : (d = e.insertRow(-1), b = d.insertCell(-1), b.innerHTML = \"<div class='td_head'>\" + encodeText(c) + \"</div>\", d = d.insertCell(-1), d.innerHTML = \"<div class='td_row_even'>\" +",
					"        encodeText(a[c]) + \"</div>\") : (d = e.insertRow(-1), b = d.insertCell(-1), b.colSpan = 2, b.innerHTML = '<div class=\"td_head\">' + encodeText(c) + '</div><table style=\"width:100%\">' + $(buildTable(a[c]), !1).html() + \"</table>\");",
					"    return e",
					"}",
					"",
					"function buildArray(a) {",
					"    var e = document.createElement(\"table\"),",
					"        d, b, c = !1,",
					"        p = !1,",
					"        m = {},",
					"        h = -1,",
					"        n = 0,",
					"        l;",
					"    l = \"\";",
					"    if (0 == a.length) return \"<div></div>\";",
					"    d = e.insertRow(-1);",
					"    for (var f = 0; f < a.length; f++)",
					"        if (\"object\" != typeof a[f] || isArray(a[f])) \"object\" == typeof a[f] && isArray(a[f]) ? (b = d.insertCell(h), b.colSpan = 2, b.innerHTML = '<div class=\"td_head\"></div><table style=\"width:100%\">' + $(buildArray(a[f]), !1).html() + \"</table>\", c = !0) : p || (h += 1, p = !0, b = d.insertCell(h), m.empty = h, b.innerHTML = \"<div class='td_head'>&nbsp;</div>\");",
					"        else",
					"            for (var k in a[f]) l =",
					"                \"-\" + k, l in m || (c = !0, h += 1, b = d.insertCell(h), m[l] = h, b.innerHTML = \"<div class='td_head'>\" + encodeText(k) + \"</div>\");",
					"    c || e.deleteRow(0);",
					"    n = h + 1;",
					"    for (f = 0; f < a.length; f++)",
					"        if (d = e.insertRow(-1), td_class = isEven(f) ? \"td_row_even\" : \"td_row_odd\", \"object\" != typeof a[f] || isArray(a[f]))",
					"            if (\"object\" == typeof a[f] && isArray(a[f]))",
					"                for (h = m.empty, c = 0; c < n; c++) b = d.insertCell(c), b.className = td_class, l = c == h ? '<table style=\"width:100%\">' + $(buildArray(a[f]), !1).html() + \"</table>\" : \" \", b.innerHTML = \"<div class='\" + td_class + \"'>\" + encodeText(l) +",
					"                    \"</div>\";",
					"            else",
					"                for (h = m.empty, c = 0; c < n; c++) b = d.insertCell(c), l = c == h ? a[f] : \" \", b.className = td_class, b.innerHTML = \"<div class='\" + td_class + \"'>\" + encodeText(l) + \"</div>\";",
					"    else {",
					"        for (c = 0; c < n; c++) b = d.insertCell(c), b.className = td_class, b.innerHTML = \"<div class='\" + td_class + \"'>&nbsp;</div>\";",
					"        for (k in a[f]) c = a[f], l = \"-\" + k, h = m[l], b = d.cells[h], b.className = td_class, \"object\" != typeof c[k] || isArray(c[k]) ? \"object\" == typeof c[k] && isArray(c[k]) ? b.innerHTML = '<table style=\"width:100%\">' + $(buildArray(c[k]), !1).html() + \"</table>\" : b.innerHTML =",
					"            \"<div class='\" + td_class + \"'>\" + encodeText(c[k]) + \"</div>\" : b.innerHTML = '<table style=\"width:100%\">' + $(buildTable(c[k]), !1).html() + \"</table>\"",
					"    }",
					"    return e",
					"}",
					"",
					"function encodeText(a) {",
					"    return $(\"<div />\").text(a).html()",
					"}",
					"",
					"function isArray(a) {",
					"    return \"[object Array]\" === Object.prototype.toString.call(a)",
					"}",
					"",
					"function isEven(a) {",
					"    return 0 == a % 2",
					"}",
					"</script>`;",
					"",
					"",
					"// In case you only want a specific property, change it here.",
					"//",
					"// Default: You can set the entire JSON response using pm.response.json()",
					"let tableProps = {",
					"    json: pm.response.json()",
					"};",
					"",
					"pm.visualizer.set(template, tableProps);",
					""
				]
			}
		}
	]
}