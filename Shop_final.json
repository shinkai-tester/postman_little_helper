{
	"info": {
		"_postman_id": "6fc9b42f-a31d-4d96-a8e9-2e084dabacb9",
		"name": "Shop_final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5430351",
		"_collection_link": "https://shinkai-tester.postman.co/workspace/Team-Workspace~f2b37203-5c0d-458f-80ce-4a73f59be5b2/collection/5430351-6fc9b42f-a31d-4d96-a8e9-2e084dabacb9?action=share&creator=5430351&source=collection_link"
	},
	"item": [
		{
			"name": "Create new item",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//создаем функцию-рандомайзер\r",
							"const randomInteger = (min, max) => {\r",
							"  let rand = min + Math.random() * (max + 1 - min);\r",
							"  return Math.floor(rand);\r",
							"}\r",
							"\r",
							"//создаем функцию для рандомного выбора из списка категорий и записи в переменную коллекции\r",
							"const setSection = () => {\r",
							"    const sectionList = ['Платья', 'Шорты', 'Верхняя одежда', 'Рубашки', 'Брюки', 'Футболки',  'Категория 1', 'Категория 2', 'Категория 3', 'Категория 4', 'Test', '\\(O_o)/'];\r",
							"    const section = sectionList[_.random(0, sectionList.length-1)]\r",
							"    pm.collectionVariables.set(\"section\", section);\r",
							"}\r",
							"\r",
							"//создаем функцию для рандомного выбора из списка цветов и записи в переменную коллекции\r",
							"const setColor = () => {\r",
							"    const colorList = ['Черный', 'Красный', 'Синий', 'Белый', 'Фиолетовый', 'RED',  'ORANGE', 'BLUE', 'GREEN', 'Коричневый'];\r",
							"    const color = colorList[randomInteger(0, colorList.length-1)]\r",
							"    pm.collectionVariables.set(\"color\", color);\r",
							"}\r",
							"\r",
							"//создаем функцию для рандомного заполнения цены и записи в переменную коллекции\r",
							"const setPrice = () => {\r",
							"    const price = randomInteger(0,9999);\r",
							"    pm.collectionVariables.set(\"price\", price);\r",
							"}\r",
							"\r",
							"//вызываем созданные функции и заполняем переменные коллекции, которые будем использовать в теле запроса\r",
							"setSection();\r",
							"setColor();\r",
							"setPrice();\r",
							"\r",
							"\r",
							"/*\r",
							"function to set symbols to random order\r",
							"go from RIGHT to LEFT. Take i element on the right (for ex., i=12), choose random element on the LEFT (j)\r",
							"swap i and j. Now i=11 -> repeat. \r",
							"(i+1) is used, not just i, so that element can swap places with itself.\r",
							"Read more about this function: https://learn.javascript.ru/task/shuffle\r",
							"*/\r",
							"function shuffle(array) {\r",
							"  for (let i = array.length - 1; i > 0; i--) {\r",
							"    let j = Math.floor(Math.random() * (i + 1));\r",
							"    [array[i], array[j]] = [array[j], array[i]];\r",
							"  }\r",
							"  return array;\r",
							"};\r",
							"\r",
							"//set variables\r",
							"/*\r",
							"Generate password according to the rule:\r",
							"PASSWORD must be 12-20 chars long and include at least 3 chars of the following categories:\r",
							"Lower case letters, Upper case letters, Numbers and/or Special characters.\r",
							"*/\r",
							"function generateDescription(descriptionLength) {\r",
							"  var numberChars = \"0123456789-+._!@#$%&§*()~<>\";\r",
							"  var upperChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
							"  var lowerChars = \"abcdefghijklmnopqrstuvwxyz\";\r",
							"  var allChars = numberChars + upperChars + lowerChars;\r",
							"  var randDescriptionArray = Array(descriptionLength);\r",
							"  //fill in the array. Set 1st, 2nd, 3rd element\r",
							"  randDescriptionArray[0] = numberChars;\r",
							"  randDescriptionArray[1] = upperChars;\r",
							"  randDescriptionArray[2] = lowerChars;\r",
							"  //other elements (4th and further are concatination allChars)\r",
							"  randDescriptionArray = randDescriptionArray.fill(allChars, 3);\r",
							"  /*\r",
							"  The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.\r",
							"  Take element x (for example, x[0]), return only 1 symbol from it (for example, \"f\") => each of the 12 elements will 'donate' 1 random symbol (if we have 12 len password).\r",
							"  Concatinate elements of the array using .join('') -> we already have pretty OK result.\r",
							"  Make it better - shuffle symbols in the string.\r",
							"  */\r",
							"  return shuffle(randDescriptionArray.map(function(x) { return x[Math.floor(Math.random() * x.length)] })).join('');\r",
							"};\r",
							"\r",
							"pm.collectionVariables.set(\"randomDescription\",generateDescription(64));\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json; \r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"проверяем в ответе наличие id и name\", function () {\r",
							"    pm.expect(response.result).to.have.property('id').that.is.not.empty;\r",
							"    pm.expect(response.result).to.have.property('name').that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"item_id\", response.result.id);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Валидация JSON схемы\r",
							"\r",
							"const createNewItemSchema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"method\",\r",
							"\t\t\"status\",\r",
							"\t\t\"result\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"method\": {\r",
							"\t\t\t\"type\": \"string\"\r",
							"\t\t},\r",
							"\t\t\"status\": {\r",
							"\t\t\t\"type\": \"string\"\r",
							"\t\t},\r",
							"\t\t\"result\": {\r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"id\",\r",
							"\t\t\t\t\"name\",\r",
							"\t\t\t\t\"section\",\r",
							"\t\t\t\t\"description\",\r",
							"\t\t\t\t\"params\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"id\": {\r",
							"\t\t\t\t\t\"type\": \"string\"\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"name\": {\r",
							"\t\t\t\t\t\"type\": \"string\"\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"section\": {\r",
							"\t\t\t\t\t\"type\": \"string\"\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"description\": {\r",
							"\t\t\t\t\t\"type\": \"string\"\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"size\": {\r",
							"\t\t\t\t\t\"type\": \"string\"\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"color\": {\r",
							"\t\t\t\t\t\"type\": \"string\"\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"price\": {\r",
							"\t\t\t\t\t\"type\": \"number\"\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"params\": {\r",
							"\t\t\t\t\t\"type\": \"string\"\r",
							"\t\t\t\t}\r",
							"\t\t\t},\r",
							"\t\t\t\"additionalProperties\": true\r",
							"\t\t}\r",
							"\t},\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"\r",
							"pm.test(\"Validate schema - new item creation response\", () => {\r",
							"    pm.response.to.have.jsonSchema(createNewItemSchema);\r",
							"});\r",
							"\r",
							"// чтобы дебажить :)\r",
							"const Ajv = require('ajv');\r",
							"ajv = new Ajv({logger: console});\r",
							"\r",
							"pm.test('Response in ' + request.name + ' matches the schema ItemInfoDto', function() {\r",
							"  pm.expect(ajv.validate(createNewItemSchema, response)).to.be.true;\r",
							"});\r",
							"if (ajv.errors) {\r",
							"    console.log(ajv.errors);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomProduct}}",
							"type": "text"
						},
						{
							"key": "section",
							"value": "{{section}}",
							"type": "text"
						},
						{
							"key": "description",
							"value": "{{randomDescription}}",
							"type": "text"
						},
						{
							"key": "color",
							"value": "{{color}}",
							"type": "text"
						},
						{
							"key": "size",
							"value": "42",
							"type": "text"
						},
						{
							"key": "price",
							"value": "{{price}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/api/items/create/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items",
						"create",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get item's info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"id in response is correct\", function () {\r",
							"    pm.expect(response.result.id).to.eql(pm.collectionVariables.get(\"item_id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\" : {{item_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/items/get/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items",
						"get",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"Body is correct\", function() {\r",
							"    pm.expect(response.result).to.eql(\"Товар обновлен!\")\r",
							"});\r",
							"\r",
							"const getUrl = pm.environment.get(\"url\") + \"/api/items/get\";\r",
							"const body = { \"id\": JSON.parse(pm.collectionVariables.get(\"item_id\")) };\r",
							"console.log(getUrl);\r",
							"console.log(JSON.stringify(body));\r",
							"\r",
							"const getItem = {\r",
							"    url: getUrl,\r",
							"    method: 'GET',\r",
							"    header: 'Content-Type:application/json',\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"        raw: JSON.stringify(body)\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(getItem, function (err, res) {\r",
							"if (!err) {\r",
							"        const jsonData = res.json();\r",
							"        console.log(jsonData);\r",
							"        const itemId = jsonData.result.id;\r",
							"        pm.test(`id = ${itemId}`);\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<request>\r\n<id>{{item_id}}</id>\r\n<name>{{$randomProduct}}</name>\r\n<section>{{section}}</section>\r\n<description>{{$randomProductAdjective}}</description>\r\n<size>44</size>\r\n<color>{{color}}</color>\r\n<price>{{price}}</price>\r\n<params>dress, тест</params>\r\n</request>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/items/update/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items",
						"update",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete item",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\" : {{item_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/items/delete/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items",
						"delete",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Test search with creating and deleting data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// сколько товаров нужно сгенерировать (от 1 до 10)\r",
							"var countItems = pm.environment.set('countItems', _.random(1,10));\r",
							"\r",
							"// уникальная строка, по которой будем искать товары\r",
							"var queryForSearch = \"ShurkaItem\" + Math.floor(Math.random() * 10000);\r",
							"pm.environment.set(\"queryForSearch\", queryForSearch);\r",
							"\r",
							"/*\r",
							"массивы names, prices, descrs нужны для того, чтобы проверить данные в результате сёрча.\r",
							"idArray с id товаров нужен для того, чтобы удалить все товары после сёрча.\r",
							"*/\r",
							"var idArray = [];\r",
							"var names = [];\r",
							"var prices = [];\r",
							"var descrs = [];\r",
							"\r",
							"// создаем товары\r",
							"for(i = 0; i < pm.environment.get(\"countItems\"); i++)\r",
							"{\r",
							"    var nameItem = queryForSearch + \"_\" + pm.variables.replaceIn(\"{{$randomProductName}}\");\r",
							"    var descrItem = pm.variables.replaceIn(\"{{$randomProductAdjective}}\");\r",
							"    var priceItem = pm.variables.replaceIn(\"{{$randomPrice}}\");\r",
							"    const echoPreRequest = {\r",
							"    url: 'http://shop.bugred.ru/api/items/create/',\r",
							"    method: 'POST',\r",
							"    header: 'Content-Type:application/json',\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ \r",
							"        name: nameItem , \r",
							"        section: '＼(〇_ｏ)／',\r",
							"        description: descrItem,\r",
							"        price: priceItem})\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.sendRequest(echoPreRequest, function (err, res) {\r",
							"  console.log(err ? err : res.json());\r",
							"    idArray.push(res.json().result.id);\r",
							"    names.push(res.json().result.name);\r",
							"    prices.push(res.json().result.price);\r",
							"    descrs.push(res.json().result.description);\r",
							"    postman.setEnvironmentVariable(\"idArray\", idArray);\r",
							"    postman.setEnvironmentVariable(\"names\", names);\r",
							"    postman.setEnvironmentVariable(\"descrs\", descrs);\r",
							"    postman.setEnvironmentVariable(\"prices\", prices);\r",
							"});  \r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"\r",
							"// ожидаемое и реальное количество товаров\r",
							"var expectedCount = parseInt(pm.environment.get(\"countItems\"));\r",
							"var realCount = response.result.length\r",
							"\r",
							"/*\r",
							"idArr - массив с id товаров, чтобы удалить их\r",
							"namesArr - массив с названиями товаров\r",
							"descrArr - массив с описаниями товаров\r",
							"priceArr - массив с ценами товаров\r",
							"*/\r",
							"var idArr = pm.environment.get(\"idArray\").split(',');\r",
							"var namesArr = pm.environment.get(\"names\").split(',');\r",
							"var descrArr = pm.environment.get(\"descrs\").split(',');\r",
							"var priceArr = pm.environment.get(\"prices\").split(',');\r",
							"\r",
							"/* создаем двумерный массив common. Каждый массив массива common будет содержать\r",
							"id товара, его имя, его описание и цену. Сортируем также двумерный массив по значению id товара,\r",
							"так как в рез-те сёрча товары возвращаются в порядке возрастания id\r",
							"*/\r",
							"common = [];\r",
							"for (var i = 0; i < idArr.length; i++) {\r",
							"  common[i] = new Array(idArr[i], namesArr[i], descrArr[i], priceArr[i]);\r",
							"}\r",
							"common.sort(function(a,b) {\r",
							"    return a[0]-b[0]\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Вернулся статус 200\", function () {\r",
							"    pm.response.to.be.success\r",
							"});\r",
							"\r",
							"pm.test(\"Вернулось корректное количество записей = \" + expectedCount, function () {\r",
							"    pm.expect(expectedCount).to.eql(realCount);\r",
							"});\r",
							"\r",
							"// проверяем наличие всех полей у каждого товара\r",
							"for (i = 0; i < realCount; i++) {\r",
							"    pm.test(\"проверяем наличие свойства id у товара с id \" + response.result[i].id, function () {\r",
							"    pm.expect(response.result[i]).to.have.property('id').that.is.a('string');\r",
							"});\r",
							"\r",
							"    pm.test(\"проверяем наличие свойства name у товара с id \" + response.result[i].id + \" и значение name - \" + response.result[i].name, function () {\r",
							"    pm.expect(response.result[i]).to.have.property('name').that.is.a('string');\r",
							"    pm.expect(response.result[i].name).to.eql(common[i][1]);\r",
							"});\r",
							"\r",
							"    pm.test(\"проверяем наличие свойства section у товара с id \" + response.result[i].id + \" и значение section - '＼(〇_ｏ)／'\", function () {\r",
							"    pm.expect(response.result[i]).to.have.property('section').that.is.a('string');\r",
							"    pm.expect(response.result[i].section).to.eql('＼(〇_ｏ)／');\r",
							"});\r",
							"\r",
							"    pm.test(\"проверяем наличие свойства description у товара с id \" + response.result[i].id + \" и значение description - \" + response.result[i].description, function () {\r",
							"    pm.expect(response.result[i]).to.have.property('description').that.is.a('string');\r",
							"    pm.expect(response.result[i].description).to.eql(common[i][2]);\r",
							"});\r",
							"\r",
							"    pm.test(\"проверяем наличие свойства price у товара с id \" + response.result[i].id + \" и значение price - \" + response.result[i].price, function () {\r",
							"    pm.expect(response.result[i]).to.have.property('price').that.is.a('number');\r",
							"    pm.expect(response.result[i].price).to.eql(Number(common[i][3]));\r",
							"});\r",
							"\r",
							"    pm.test(\"проверяем наличие свойства color у товара с id \" + response.result[i].id, function () {\r",
							"    pm.expect(response.result[i]).to.have.property('color');\r",
							"});\r",
							"\r",
							"    pm.test(\"проверяем наличие свойства size у товара с id \" + response.result[i].id, function () {\r",
							"    pm.expect(response.result[i]).to.have.property('size');\r",
							"});\r",
							"\r",
							"    pm.test(\"проверяем наличие свойства params у товара с id \" + response.result[i].id, function () {\r",
							"    pm.expect(response.result[i]).to.have.property('params');\r",
							"});\r",
							"\r",
							"const deleteItem = {\r",
							"  url: 'http://shop.bugred.ru/api/items/delete/',\r",
							"  method: 'POST',\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ \r",
							"        id: idArr[i]\r",
							"    })\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.sendRequest(deleteItem, function (err, res) {\r",
							"  if (err) { console.log(err); }\r",
							"  console.log(res.json().result);\r",
							"});\r",
							"};\r",
							"\r",
							"pm.environment.unset(\"countItems\");\r",
							"pm.environment.unset(\"idArray\");\r",
							"pm.environment.unset(\"queryForSearch\");\r",
							"pm.environment.unset(\"names\");\r",
							"pm.environment.unset(\"descrs\");\r",
							"pm.environment.unset(\"prices\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"query\": \"{{queryForSearch}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/items/search/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items",
						"search",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "section",
			"value": ""
		},
		{
			"key": "color",
			"value": "",
			"type": "string"
		},
		{
			"key": "price",
			"value": "",
			"type": "string"
		},
		{
			"key": "item_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomDescription",
			"value": "",
			"type": "string"
		}
	]
}