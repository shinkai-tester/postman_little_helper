name: Shop API Testing

# Triggers for the workflow: push to main, pull request to main, manual trigger, and scheduled run at midnight UTC
on:
  # push:
  #  branches: [ "main" ]
  # pull_request:
  #  branches: [ "main" ]
  workflow_dispatch:
  # schedule:
  #  - cron: '0 0 * * *'

jobs:
  run-shop-api-tests:
    name: Execute Shop app API Tests
    runs-on: ubuntu-latest  # Specifies that the job runs on the latest Ubuntu runner

    steps:
      # Step 1: Checkout the repository content
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js environment
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      # Step 3: Install Newman, htlmextra and Allure reporters
      - name: Install Newman and reporters
        run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra
          npm install -g newman-reporter-allure
          
      # Step 4: Create directory for test results
      - name: Create directory for test results
        run: mkdir -p testResults # Creates a directory to store test results and artifacts
        
      # Step 5: Execute Postman collection
      - name: Execute Shop_final collection
        run:
          newman run Shop_final.json -e Shop_environment.json -r htmlextra,cli,allure --reporter-htmlextra-export testResults/htmlreport.html --reporter-allure-export testResults/allure-results > testResults/output.txt
        continue-on-error: true # Allows the workflow to continue even if this step fails
        
      # Step 6: Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() # Ensures this step always runs, regardless of previous step's success or failure
        with:
          name: testResults
          path: testResults # Uploads the test results directory as an artifact

      # Step 7: Checkout test history
      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages # Checks out the gh-pages branch for deployment
          path: gh-pages

      # Step 8: Generate Allure report
      - name: Generate Allure report
        uses: simple-elf/allure-report-action@master
        if: always()
        with:
          gh_pages: gh-pages
          allure_results: testResults/allure-results
          allure_report: allure-report
          allure_history: allure-history

      # Step 9: Publish report to GitHub Pages
      - name: Deploy report to Github Pages
        uses: peaceiris/actions-gh-pages@v4
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # Uses the GitHub token to authenticate and publish to GitHub Pages
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history # Specifies the directory from which GitHub Pages should serve the site
