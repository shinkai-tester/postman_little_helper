{
	"info": {
		"_postman_id": "96563a40-0722-47e1-afe4-c0d08be30a3c",
		"name": "01_Shop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37123502",
		"_collection_link": "https://www.postman.com/shurka-tester/workspace/masterclass-data/collection/37123502-96563a40-0722-47e1-afe4-c0d08be30a3c?action=share&source=collection_link&creator=37123502"
	},
	"item": [
		{
			"name": "Create new item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonReqBody = JSON.parse(pm.request.body);\r",
							"var newName = jsonReqBody.name;\r",
							"pm.collectionVariables.set('newName', newName);\r",
							"\r",
							"pm.test(\"Response must be valid and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json; \r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"id and name properties are in response\", function () {\r",
							"    pm.expect(response.result).to.have.property('id').that.is.not.empty;\r",
							"    pm.expect(response.result).to.have.property('name').that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"item_id\", response.result.id);\r",
							"\r",
							"\r",
							"\r",
							"// JSON-схема\r",
							"const createNewItemSchema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"method\",\r",
							"        \"status\",\r",
							"        \"result\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"method\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"result\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"name\",\r",
							"                \"section\",\r",
							"                \"description\",\r",
							"                \"params\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"name\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"section\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"description\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"size\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"color\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"price\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"params\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": true\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"};\r",
							"\r",
							"// Валидация схемы ответа\r",
							"pm.test(\"Validate schema - new item creation response\", () => {\r",
							"    pm.response.to.have.jsonSchema(createNewItemSchema);\r",
							"});\r",
							"\r",
							"\r",
							"pm.execution.setNextRequest(\"Update item\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const lodash = require('lodash');\r",
							"\r",
							"//создаем функцию-рандомайзер\r",
							"const randomInteger = (min, max) => {\r",
							"  let rand = min + Math.random() * (max + 1 - min);\r",
							"  return Math.floor(rand);\r",
							"}\r",
							"\r",
							"//создаем функцию для рандомного выбора из списка категорий и записи в переменную коллекции\r",
							"const setSection = () => {\r",
							"    const sectionList = ['Верхняя одежда', 'Шорты', 'Платья', 'Брюки', 'Рубашки', 'Футболки'];\r",
							"    const section = sectionList[lodash.random(0, sectionList.length-1)]\r",
							"    pm.collectionVariables.set(\"section\", section);\r",
							"}\r",
							"\r",
							"//создаем функцию для рандомного выбора из списка цветов и записи в переменную коллекции\r",
							"const setColor = () => {\r",
							"    const colorList = ['Черный', 'Красный', 'Синий', 'Белый', 'Фиолетовый', 'ORANGE', 'GREEN', 'Коричневый'];\r",
							"    const color = colorList[randomInteger(0, colorList.length-1)]\r",
							"    pm.collectionVariables.set(\"color\", color);\r",
							"}\r",
							"\r",
							"//создаем функцию для рандомного заполнения цены и записи в переменную коллекции\r",
							"const setPrice = () => {\r",
							"    const price = randomInteger(0,9999);\r",
							"    pm.collectionVariables.set(\"price\", price);\r",
							"}\r",
							"\r",
							"//вызываем созданные функции и заполняем переменные коллекции, которые будем использовать в теле запроса\r",
							"setSection();\r",
							"setColor();\r",
							"setPrice();\r",
							"\r",
							"\r",
							"/*\r",
							"  Функция shuffle случайным образом переупорядочивает элементы массива.\r",
							"  Алгоритм Фишера-Йетса:\r",
							"  - Начиная с конца массива, на каждой итерации выбираем элемент с индексом i и случайным образом выбираем другой элемент с индексом j (где j находится между 0 и i)\r",
							"  - Меняем местами элементы i и j\r",
							"  - Процесс повторяется до тех пор, пока не будут пройдены все элементы.\r",
							"*/\r",
							"function shuffle(array) {\r",
							"  for (let i = array.length - 1; i > 0; i--) {\r",
							"    let j = Math.floor(Math.random() * (i + 1));\r",
							"    [array[i], array[j]] = [array[j], array[i]];\r",
							"  }\r",
							"  return array;\r",
							"};\r",
							"\r",
							"/*\r",
							"  Функция generateDescription генерирует строку, содержащую случайные символы: цифры, спецсимволы, заглавные и строчные буквы.\r",
							"  Параметр descriptionLength задаёт длину генерируемой строки.\r",
							"*/\r",
							"function generateDescription(descriptionLength) {\r",
							"  // Разделяем цифры и специальные символы на отдельные наборы\r",
							"  var numberChars = \"0123456789\";\r",
							"  var specialChars = \"-+._!@#$%&§*()~<>\";\r",
							"  var upperChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
							"  var lowerChars = \"abcdefghijklmnopqrstuvwxyz\";\r",
							"  // Объединяем все наборы символов в одну строку\r",
							"  var allChars = numberChars + specialChars + upperChars + lowerChars;\r",
							"  \r",
							"  // Создаём массив длиной descriptionLength\r",
							"  var randDescriptionArray = Array(descriptionLength);\r",
							"\r",
							"  /*\r",
							"    Обеспечиваем наличие хотя бы одного символа из каждой категории:\r",
							"    1. Первый элемент — случайная цифра\r",
							"    2. Второй элемент — случайный специальный символ\r",
							"    3. Третий элемент — случайная заглавная буква\r",
							"    4. Четвёртый элемент — случайная строчная буква\r",
							"  */\r",
							"  randDescriptionArray[0] = numberChars[Math.floor(Math.random() * numberChars.length)];\r",
							"  randDescriptionArray[1] = specialChars[Math.floor(Math.random() * specialChars.length)];\r",
							"  randDescriptionArray[2] = upperChars[Math.floor(Math.random() * upperChars.length)];\r",
							"  randDescriptionArray[3] = lowerChars[Math.floor(Math.random() * lowerChars.length)];\r",
							"\r",
							"  /*\r",
							"    Заполняем оставшуюся часть массива (с 4-го элемента до конца) строкой allChars,\r",
							"    которая содержит все возможные символы (цифры, заглавные и строчные буквы, спецсимволы).\r",
							"    Метод fill просто копирует ссылку на строку allChars в оставшиеся элементы массива.\r",
							"  */\r",
							"  randDescriptionArray = randDescriptionArray.fill(allChars, 4);\r",
							"\r",
							"  /*\r",
							"    Метод map() проходит по каждому элементу массива randDescriptionArray:\r",
							"    - Если элемент — это строка (например, allChars), выбираем случайный символ из этой строки.\r",
							"    - Если это один из первых четырёх элементов, где уже есть конкретные символы (цифры, спецсимволы, заглавные и строчные буквы), мы просто возвращаем этот символ.\r",
							"    - После этого вызываем shuffle(), чтобы перемешать символы в массиве, делая их порядок случайным.\r",
							"    - В конце объединяем массив символов в одну строку с помощью метода join('').\r",
							"  */\r",
							"  return shuffle(randDescriptionArray.map(function(x) { return x[Math.floor(Math.random() * x.length)] })).join('');\r",
							"};\r",
							"\r",
							"// Сохраняем сгенерированное описание в переменной коллекции Postman\r",
							"pm.collectionVariables.set(\"randomDescription\", generateDescription(64));\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomProduct}}\",\r\n    \"section\": \"{{section}}\",\r\n    \"description\": \"{{randomDescription}}\",\r\n    \"color\": \"{{color}}\",\r\n    \"size\": \"42\",\r\n    \"price\": \"{{price}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/items/create/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items",
						"create",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get item's info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"id in response is as expected (created in previous request)\", function () {\r",
							"    pm.expect(response.result.id).to.eql(pm.collectionVariables.get(\"item_id\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\" : {{item_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/items/get/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items",
						"get",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"Body result text is correct\", function() {\r",
							"    pm.expect(response.result).to.eql(\"Товар обновлен!\")\r",
							"});\r",
							"\r",
							"const getUrl = pm.environment.get(\"url\") + \"/api/items/get\";\r",
							"const body = { \"id\": JSON.parse(pm.collectionVariables.get(\"item_id\")) };\r",
							"\r",
							"const getItem = {\r",
							"    url: getUrl,\r",
							"    method: 'GET',\r",
							"    header: 'Content-Type:application/json',\r",
							"    body: {\r",
							"    mode: 'raw',\r",
							"        raw: JSON.stringify(body)\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.sendRequest(getItem, function (err, res) {\r",
							"if (!err) {\r",
							"        const jsonData = res.json();\r",
							"        const itemId = jsonData.result.id;\r",
							"        const name = jsonData.result.name;\r",
							"        const description = jsonData.result.description;\r",
							"        const size = jsonData.result.size;\r",
							"        pm.test(`id = ${itemId}`);\r",
							"        pm.test(`name = ${name}`);\r",
							"        pm.test(`description = ${description}`);\r",
							"        pm.test(`size = ${size}`);\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<request>\r\n    <id>{{item_id}}</id>\r\n    <name>{{$randomProduct}}</name>\r\n    <section>{{section}}</section>\r\n    <description>{{$randomProductAdjective}}</description>\r\n    <size>44</size>\r\n    <color>{{color}}</color>\r\n    <price>{{price}}</price>\r\n    <params>dress, тест</params>\r\n</request>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/items/update/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items",
						"update",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check message that the order with specific id is deleted\", function () {\r",
							"    pm.expect(jsonData.result).to.eql(`Товар с ID ${pm.collectionVariables.get(\"item_id\")} успешно удален`);\r",
							"});\r",
							"\r",
							"// Получаем все переменные коллекции в виде объекта\r",
							"const allVariables = pm.collectionVariables.toObject();\r",
							"\r",
							"// Удаляем каждую переменную\r",
							"Object.keys(allVariables).forEach(variable => {\r",
							"    pm.collectionVariables.unset(variable);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\" : {{item_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/items/delete/",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"items",
						"delete",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}